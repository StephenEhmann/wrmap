// Set the custom overlay object's prototype to a new instance
// of OverlayView. In effect, this will subclass the overlay class therefore
// it's simpler to load the API synchronously, using
// google.maps.event.addDomListener().
// Note that we set the prototype to an instance, rather than the
// parent class itself, because we do not wish to modify the parent class.

var overlay;
Overlay.prototype = new google.maps.OverlayView();

// Initialize the map and the custom overlay.

function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 11,
    center: {
      lat: 36.0018269,
      lng: -78.884911
    },
    styles: [{
      "elementType": "all",
      "featureType": "all",
      "stylers": [{
        "saturation": -100
      }]
    }]
  });
  
  //var marker = new google.maps.Marker({
  //        position: {lat: 35.9961482, lng: -78.88933349999999},
  //        map: map
  //});

  var bounds = new google.maps.LatLngBounds(
    new google.maps.LatLng(35.8667249, -79.00765),
    new google.maps.LatLng(36.1369289, -78.762172));

  var srcImage = 'https://s10.postimg.org/doxu4ob15/final.ryg.png';

  // The custom OVerlay object contains the image,
  // the bounds of the image, and a reference to the map.
  overlay = new Overlay(bounds, srcImage, map);
}

/** @constructor */
function Overlay(bounds, image, map) {

  // Initialize all properties.
  this.bounds_ = bounds;
  this.image_ = image;
  this.map_ = map;

  // Define a property to hold the image's div. We'll
  // actually create this div upon receipt of the onAdd()
  // method so we'll leave it null for now.
  this.div_ = null;

  // Explicitly call setMap on this overlay.
  this.setMap(map);
}

/**
 * onAdd is called when the map's panes are ready and the overlay has been
 * added to the map.
 */
Overlay.prototype.onAdd = function() {

  var div = document.createElement('div');
  div.style.borderStyle = 'none';
  div.style.borderWidth = '0px';
  div.style.position = 'absolute';

  // Create the img element and attach it to the div.
  // Create the img element and attach it to the div.
  var canv = document.createElement('canvas');
  // Size the cavas to the image
  canv.width = 100;
  canv.height = 135;
  canv.style.position = 'absolute';
  canv.style.opacity = 0.5;
  var ctx = canv.getContext('2d');
  
  var img = new Image();
  img.onload = function () {
    ctx.drawImage(img, 0, 0)
  }
  img.src = this.image_;
  //img.src = this.image_;
  //img.style.width = '100%';
  //img.style.height = '100%';
  //img.style.position = 'absolute';
  //img.style.opacity = '0.5';
  //div.appendChild(img);
  div.appendChild(canv);

  this.div_ = div;
  this.canv_ = canv;

  // Add the element to the "overlayLayer" pane.
  var panes = this.getPanes();
  panes.overlayLayer.appendChild(div);
};

Overlay.prototype.draw = function() {

  // We use the south-west and north-east
  // coordinates of the overlay to peg it to the correct position and size.
  // To do this, we need to retrieve the projection from the overlay.
  var overlayProjection = this.getProjection();

  // Retrieve the south-west and north-east coordinates of this overlay
  // in LatLngs and convert them to pixel coordinates.
  // We'll use these coordinates to resize the div.
  var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
  var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

  // Resize the image's div to fit the indicated dimensions.
  var div = this.canv_;
  div.style.left = sw.x + 'px';
  div.style.top = ne.y + 'px';
  div.style.width = (ne.x - sw.x) + 'px';
  div.style.height = (sw.y - ne.y) + 'px';
};

// The onRemove() method will be called automatically from the API if
// we ever set the overlay's map property to 'null'.
Overlay.prototype.onRemove = function() {
  this.div_.parentNode.removeChild(this.div_);
  this.div_ = null;
};

google.maps.event.addDomListener(window, 'load', initMap);

